<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="/assets/img/logo-pic.png" type="image/x-icon" />
    <link rel="stylesheet" href="/css/campaign.css">
    <link rel="stylesheet" href="/assets/font/fontawesome-free-6.2.1-web/fontawesome-free-6.2.1-web/css/all.css">
    <link rel="stylesheet" href="/assets/bootstrap/bootstrap-4.6.2-dist/css/bootstrap.css">
    <title>BloodDono-Chỉnh sửa chiến dịch</title>
</head>

<body>
    <div id="header">
        <div class="container-fluid">
            <div class="row logo">
                <a href="/" class="logo col-md-4">
                    <img src="/assets/img/logo-pic.png" alt="" class="logo-pic line">
                    <div class="logo-name line">BloodDono</div>
                </a>
            </div>

            <div class="row heading">
                <div class="rectangle">Chỉnh sửa chiến dịch</div>
                <div class="triangle"></div>
            </div>
        </div>
    </div>

    <div id="content">
        <form action="" class="container">
            <!-- Tên chiến dịch -->
            <div class="row d-flex justify-content-center">
                <div class="col-2">Tên chiến dịch</div>
                <input type="text" name="" id="name" class="col-5 padding-0" required>
            </div>
            <!-- ---------------------- -->

            <!-- Thời gian -->
            <div class="row d-flex justify-content-center">
                <div class="col-2">Thời gian</div>
                <div class="col-5 padding-0 timer">
                    <input type="datetime-local" name="start" id="start" placeholder="Bắt đầu" required>
                    <input type="datetime-local" name="end" id="end" placeholder="Kết thúc" required>

                </div>
            </div>

            <!-- Số lượng -->
            <div class="row d-flex justify-content-center">
                <div class="col-2">Số lượng</div>
                <input type="text" name="" id="quantity" class="col-5 padding-0">
            </div>
            <!-- ---------------------- -->

            <div class="row d-flex justify-content-center" id="Address">
                <div class="col-2">Địa điểm</div>
                <div class="col-5 padding-0">
                    <input type="text" class="street" placeholder="Số nhà/Tên đường" />
                    <div class="row padding-0 combobox">
                        <select class="ward" name="ward" required>
                            <option value="default" selected disabled hidden>Chọn xã</option>
                        </select>
                        <select class="district" name="district" required>
                            <option value="default" selected disabled hidden>Chọn huyện/phường</option>
                        </select>
                        <select class="province" name="province" required>
                            <option value="default" selected disabled hidden>Chọn tỉnh</option>
                        </select>
                    </div>
                </div>

            </div>
            <!-- ---------------------- -->

            <div class="row d-flex justify-content-center">
                <div class="col-2"></div>
                <div class="col-5 padding-0">Chiến dịch sẽ được hiển thị trên trang chủ.</div>
            </div>

            <div class="row d-flex justify-content-center">
                <button class="btn-create-campaign">Chỉnh sửa chiến dịch</button>
            </div>
        </form>
    </div>
</body>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
    const province = document.querySelector('.province');
    const district = document.querySelector('.district');
    const ward = document.querySelector('.ward');
    province.addEventListener('change', (e) => {
        const province_id = e.target.value;
        axios.get(`http://localhost:3000/api/address/district/${province_id}`)
            .then((response) => {
                // handle success
                const data = response.data;
                district.innerHTML = `<option value="default" selected disabled hidden>Chọn huyện/phường</option>`;
                ward.innerHTML = `<option value="default" selected disabled hidden>Chọn xã</option>`;
                data.forEach(element => {
                    district.innerHTML += `<option value="${element.District_id}">${element.Name}</option>`;
                });
            })
            .catch((error) => {
                // handle error
                console.log(error);
            });
    });
    district.addEventListener('change', (e) => {
        const district_id = e.target.value;
        axios.get(`http://localhost:3000/api/address/ward/${district_id}`)
            .then((response) => {
                // handle success
                const data = response.data;
                ward.innerHTML = `<option value="default" selected disabled hidden>Chọn xã</option>`;
                data.forEach(element => {
                    ward.innerHTML += `<option value="${element.Wards_id}">${element.Name}</option>`;
                });
            })
            .catch((error) => {
                // handle error
                console.log(error);
            });
    });
</script>
<!-- get info -->
<script>
    const eventName = document.getElementById('name');
    const eventQuantity = document.getElementById('quantity');
    const eventStartTime = document.getElementById('start');
    const eventEndTime = document.getElementById('end');
    const street = document.querySelector('.street');
    const url = window.location.href;
    const eventID = url.split('/')[5];
    axios.get(`http://localhost:3000/api/event/${eventID}`)
        .then((response) => {
            // handle success
            const userData = response.data.data;
            const [startDate, startTime] = userData.startTime.split('T');
            const [endDate, endTime] = userData.endTime.split('T');
            eventName.value = userData.name;
            eventQuantity.value = userData.quantity;
            eventStartTime.value = new Date(`${startDate} ${startTime}`).toISOString().slice(0, 16);
            eventEndTime.value = new Date(`${endDate} ${endTime}`).toISOString().slice(0, 16);
            street.value = userData.address.street;
            axios.get('http://localhost:3000/api/address/province')
                .then((response) => {
                    // handle success
                    const data = response.data;
                    data.forEach(element => {
                        province.innerHTML += `<option value="${element.Province_id}">${element.Name}</option>`;
                    });
                    let province_id;
                    for (let i = 0; i < province.options.length; i++) {
                        if (province.options[i].text == userData.address.province) {
                            province_id = province.options[i].value;
                            province.selectedIndex = i;
                            break;
                        }
                    }
                    axios
                        .get(`http://localhost:3000/api/address/district/${province_id}`)
                        .then((response) => {
                            // handle success
                            const data = response.data;
                            data.forEach((element) => {
                                district.innerHTML += `<option value="${element.District_id}">${element.Name}</option>`;
                            });
                            let district_id;
                            for (let i = 0; i < district.options.length; i++) {
                                if (district.options[i].text == userData.address.district) {
                                    district_id = district.options[i].value;
                                    district.selectedIndex = i;
                                    break;
                                }
                            }
                            axios
                                .get(`http://localhost:3000/api/address/ward/${district_id}`)
                                .then((response) => {
                                    // handle success
                                    const data = response.data;
                                    data.forEach((element) => {
                                        ward.innerHTML += `<option value="${element.Wards_id}">${element.Name}</option>`;
                                    });
                                    for (let i = 0; i < ward.options.length; i++) {
                                        if (ward.options[i].text == userData.address.ward) {
                                            ward.selectedIndex = i;
                                            break;
                                        }
                                    }
                                })
                                .catch((error) => {
                                    // handle error
                                    console.log(error);
                                });
                        })
                        .catch((error) => {
                            // handle error
                            console.log(error);
                        });

                })
                .catch((error) => {
                    // handle error
                    console.log(error);
                });
        })
        .catch((error) => {
            // handle error
            console.log(error);
        });
    const form = document.querySelector('.container');
    form.addEventListener('submit', (e) => {
        e.preventDefault();
        //validate
        if (eventName.value == '') {
            alert('Tên sự kiện không được để trống');
            return;
        }
        if (eventQuantity.value == '') {
            alert('Số lượng người tham gia không được để trống');
            return;
        }
        if (eventStartTime.value == '') {
            alert('Thời gian bắt đầu không được để trống');
            return;
        }
        if (eventEndTime.value == '') {
            alert('Thời gian kết thúc không được để trống');
            return;
        }
        if (street.value == '' || ward.value == 'default' || district.value == 'default' || province.value == 'default') {
            alert('Địa chỉ không được để trống');
            return;
        }
        if (new Date(eventStartTime.value) > new Date(eventEndTime.value)) {
            alert('Thời gian kết thúc phải sau thời gian bắt đầu');
            return;
        }
        const data = {
            eventName: eventName.value,
            eventQuantity: eventQuantity.value,
            eventStartTime: eventStartTime.value,
            eventEndTime: eventEndTime.value,
            eventAddress: {
                street: street.value,
                ward: ward.options[ward.selectedIndex].text,
                district: district.options[district.selectedIndex].text,
                province: province.options[province.selectedIndex].text,
            }
        };
        axios.post(`http://localhost:3000/event/update-event/${eventID}`, data)
            .then((response) => {
                // handle success
                alert('Chỉnh sửa thành công');
                window.location.href = `http://localhost:3000/event/view/${eventID}`;
            })
            .catch((error) => {
                // handle error
                console.log(error);
            });
    })
</script>


</html>